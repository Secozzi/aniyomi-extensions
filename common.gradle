apply plugin: 'extensions.android.application'
apply plugin: 'extensions.kotlin'
apply plugin: 'extensions.lint'

assert !ext.has("pkgNameSuffix")
assert !ext.has("libVersion")

assert extName.chars().max().asInt < 0x180 : "Extension name should be romanized"

android {
    namespace "eu.kanade.tachiyomi.animeextension"
    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            if (!manifest.srcFile.exists()) {
                def buildDir = layout.buildDirectory.get().getAsFile().path
                mkdir(buildDir)
                File tempFile = new File(buildDir, "tempAndroidManifest.xml")
                if (!tempFile.exists()) {
                    tempFile.withWriter {
                        it.write('<?xml version="1.0" encoding="utf-8"?>\n<manifest />\n')
                    }
                }
                manifest.srcFile(tempFile.path)
            }
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }
    }

    defaultConfig {
        applicationIdSuffix project.parent.name + "." + project.name
        versionCode extVersionCode
        versionName "16.$versionCode"
        base {
            archivesName = "aniyomi-$applicationIdSuffix-v$versionName"
        }
        assert extClass.startsWith(".")
        String[] names = project.ext.find("extNames") ?: []
        assert names.length > 0

        manifestPlaceholders = [
                appName : "Aniyomi: $extName",
                extClass: extClass,
                nsfw    : project.ext.find("isNsfw") ? 1 : 0,
                versionId : project.ext.find("versionId") ?: 1,
                names : names.join(";")
        ]
    }

    signingConfigs {
        release {
            storeFile rootProject.file("signingkey.jks")
            storePassword System.getenv("KEY_STORE_PASSWORD")
            keyAlias System.getenv("ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            vcsInfo.include false
        }
    }

    dependenciesInfo {
        includeInApk = false
    }

    buildFeatures {
        buildConfig true
    }

    packaging {
        resources.excludes.add("kotlin-tooling-metadata.json")
    }
}

dependencies {
    implementation(project(":core"))
    compileOnly(libs.bundles.common)
}
